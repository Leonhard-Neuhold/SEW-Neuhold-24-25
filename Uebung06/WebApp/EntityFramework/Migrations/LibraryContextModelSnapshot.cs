// <auto-generated />
using System;
using EntityFramework.Configurations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntityFramework.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EntityFramework.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ITEM_ID");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("AUTHOR");

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("int")
                        .HasColumnName("AVAILABLE_PRICE");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ISBN");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("PUBLISHED_DATE");

                    b.Property<string>("TYPE")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("TITLE");

                    b.HasKey("Id");

                    b.ToTable("BOOKS");

                    b.HasDiscriminator<string>("TYPE").HasValue("Book");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EntityFramework.Entities.Biography", b =>
                {
                    b.HasBaseType("EntityFramework.Entities.Book");

                    b.ToTable("BOOKS");

                    b.HasDiscriminator().HasValue("BIOGRAPHY");
                });

            modelBuilder.Entity("EntityFramework.Entities.Fantasy", b =>
                {
                    b.HasBaseType("EntityFramework.Entities.Book");

                    b.ToTable("BOOKS");

                    b.HasDiscriminator().HasValue("FANTASY");
                });

            modelBuilder.Entity("EntityFramework.Entities.Mystery", b =>
                {
                    b.HasBaseType("EntityFramework.Entities.Book");

                    b.ToTable("BOOKS");

                    b.HasDiscriminator().HasValue("MYSTERY");
                });

            modelBuilder.Entity("EntityFramework.Entities.NonFiction", b =>
                {
                    b.HasBaseType("EntityFramework.Entities.Book");

                    b.ToTable("BOOKS");

                    b.HasDiscriminator().HasValue("NON_FICTION");
                });

            modelBuilder.Entity("EntityFramework.Entities.Novel", b =>
                {
                    b.HasBaseType("EntityFramework.Entities.Book");

                    b.ToTable("BOOKS");

                    b.HasDiscriminator().HasValue("NOVEL");
                });

            modelBuilder.Entity("EntityFramework.Entities.ScienceFiction", b =>
                {
                    b.HasBaseType("EntityFramework.Entities.Book");

                    b.ToTable("BOOKS");

                    b.HasDiscriminator().HasValue("SCIENCE_FICTION");
                });

            modelBuilder.Entity("EntityFramework.Entities.Textbook", b =>
                {
                    b.HasBaseType("EntityFramework.Entities.Book");

                    b.ToTable("BOOKS");

                    b.HasDiscriminator().HasValue("TEXTBOOK");
                });
#pragma warning restore 612, 618
        }
    }
}
